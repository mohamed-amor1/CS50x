-- domain name and top-level domain (TLD) --
A domain name is a unique name that identifies a website on the internet. It is used to locate and access the website through a web browser. For example, "google.com" is the domain name for the website of the popular search engine Google.

A top-level domain (TLD) is the highest level of the domain name system hierarchy. It is the last part of the domain name, and it identifies the type of organization or geographic location of the website. For example, in the domain name "google.com," ".com" is the TLD, which stands for "commercial." Other examples of TLDs include ".org" for organizations, ".edu" for educational institutions, ".gov" for government agencies, and country code TLDs such as ".us" for the United States or ".ca" for Canada.


-- hostname --
hostname is typically associated with a domain name. For example, the hostname "www" in the domain name "www.google.com" refers to the specific web server that hosts the website for the Google search engine.

-- GET and POST --
GET is used to retrieve data from the server, while POST is used to submit data to the server.

GET is used to retrieve data from the server. When a user submits a form using the GET method, the data entered in the form is appended to the URL as a query string. The data is visible in the URL, which means that it can be bookmarked, cached, or shared. GET requests are often used for simple, read-only operations such as searching for information.

POST is used to submit data to the server. When a user submits a form using the POST method, the data is sent in the request body, rather than in the URL. This means that the data is not visible in the URL, and it cannot be bookmarked or cached. POST requests are often used for more complex, write operations such as submitting a form that includes sensitive information.



-- HTTP request headers
GET / HTTP/1.1
Host: example.com

"GET / HTTP/1.1" specifies the HTTP method (GET), the resource being requested (/), and the version of the HTTP protocol being used (HTTP/1.1).

"Host: example.com" specifies the host name of the server where the resource is located. In this case, the resource is located on the server example.com.

HTTP request headers are used by the client (e.g. web browser) to send additional information about the request to the server. In this example, the request is asking for the root document of the server example.com using the GET method, and the host name of the server is provided in the Host header.

-- curl
Curl is a command-line tool for transferring data from or to a server, using various protocols including HTTP, FTP, SMTP, and many others. It supports a wide range of options and protocols, making it a versatile tool for working with web-based services.

Curl can be used to perform a variety of tasks such as downloading files, testing APIs, sending emails, and much more. It can also be used to debug network connectivity issues, as it provides detailed information about the communication between the client and the server.

e.g.
curl -I https://www.harvard.edu/

-- The most common HTTP/HTTPS status codes (error codes) are:

200 OK - The request was successful, and the server returned the requested data.
201 Created - The request was successful, and a new resource was created.
204 No Content - The request was successful, but there is no content to return.
301 Moved Permanently - The requested resource has been permanently moved to a new URL.
302 Found - The requested resource has been temporarily moved to a new URL.
400 Bad Request - The server cannot understand the request due to invalid syntax.
401 Unauthorized - The client must authenticate before making the request.
403 Forbidden - The client does not have permission to access the requested resource.
404 Not Found - The requested resource does not exist on the server.
500 Internal Server Error - The server encountered an unexpected error and cannot fulfill the request.
503 Service Unavailable - The server is currently unable to handle the request, usually because it is overloaded or undergoing maintenance.

-- Search 
GET /search?q=cats HTTP/1.1
Host: www.google.com

This is an HTTP request sent to the server www.google.com to retrieve search results for the query "cats".

The request includes two main parts:

The first line specifies the HTTP method (GET), the resource being requested (/search?q=cats), and the version of the HTTP protocol being used (HTTP/1.1).

The second line specifies the host name of the server where the resource is located. In this case, the resource is located on the server www.google.com.

The request is asking the server to return search results for the keyword "cats". When a web browser sends a request like this to a server, the server responds with a corresponding HTTP response that includes the requested data (in this case, the search results).

-- ? 
The question mark in the URL indicates the start of a query string. A query string is a part of the URL that contains additional information that the server can use to process the request.

In this case, the query string is "?q=cats". The "q" parameter indicates the search query that the client is requesting, and "cats" is the value of that parameter. When the server receives the request, it can use the value of the "q" parameter to perform a search and return the corresponding results.

The query string can contain multiple parameters, separated by an ampersand (&) character. For example, if we wanted to search for "cats" on a specific website, the URL might look like this: "/search?q=cats&site=example.com". The server could use both parameters to perform a search for "cats" on the site "example.com".

-- HTML
HTML stands for HyperText Markup Language. It is a markup language used to create and structure content for the web.

HTML provides a way to define the structure and layout of web pages, including text, images, and other media, and allows developers to add semantic meaning to the content. With HTML, developers can create hyperlinks, lists, tables, forms, and many other elements that make up modern web pages.

HTML documents are composed of a series of elements, each with its own start tag, end tag, and content. The tags indicate the type of element and how it should be displayed on the web page. For example, the <h1> tag is used to indicate a heading, while the <p> tag is used to indicate a paragraph.

Modern web development often involves using HTML in combination with other web technologies such as CSS (Cascading Style Sheets) for styling and layout, and JavaScript for interactivity and dynamic effects.


Tags and attributes are two key components of HTML markup.

Tags are used to define the structure and content of elements in an HTML document. They are enclosed in angle brackets (<>) and can include a tag name, optional attributes, and content. For example, the <p> tag is used to define a paragraph, and the <img> tag is used to insert an image into the document.

Attributes are additional properties that can be added to an HTML tag to provide more information about the element. Attributes are added to the opening tag of an element and take the form of name/value pairs. For example, the <img> tag can have attributes such as "src" to specify the image source and "alt" to provide alternative text for the image.

-- Document Object Model (DOM)
the Document Object Model (DOM) is a hierarchical representation of an HTML document that allows developers to manipulate the structure, content, and styling of the webpage using scripting languages like JavaScript. The DOM provides a set of objects, methods, and properties that enable developers to dynamically modify the HTML elements and their attributes, add or remove elements, and respond to user interactions with the webpage. The DOM also allows for the creation of interactive and dynamic web pages that can respond to user actions and events, making HTML-based web applications possible.

-- Headings
HTML provides six levels of headings, ranging from <h1> to <h6>. The different levels are used to indicate the hierarchical structure of the content on the webpage, with <h1> being the most important or prominent heading, and <h6> being the least important.

-- List
<ol> stands for "ordered list" and is used to create a list of items that are in a specific order or sequence. The <ol> tag is typically paired with the closing </ol> tag, and each item in the list is represented by a <li> tag.

<ul> stands for "unordered list" and is used to create a list of items that doesn't have a specific order or sequence. The <ul> tag is typically paired with the closing </ul> tag, and each item in the list is represented by a <li> tag.

<li> stands for "list item" and is used to create each item in the list. Each <li> tag should be nested within a <ul> tag. Here's an example of how to use <ul> and <li> tags to create a simple unordered list:
<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>

-- Table 
<table> is used to define the beginning of a table, and should be paired with the closing </table> tag. Inside the <table> element, one or more <tr> elements can be used to define each row of the table, and within each <tr> element one or more <td> elements can be used to define each cell of the table.

<table>
  <tr>
    <td>Row 1, Column 1</td>
    <td>Row 1, Column 2</td>
  </tr>
  <tr>
    <td>Row 2, Column 1</td>
    <td>Row 2, Column 2</td>
  </tr>
</table>


-- Image 
To display an image in HTML, you can use the <img> tag with the src attribute set to the URL of the image file. Here's an example:

<img alt="image description" src="image.jpg" />

Optionally, you can add other attributes to the <img> tag to specify the width, height, or CSS styles of the image. For example:

<img src="image.jpg" alt="Image description" width="400" height="300" style="border: 1px solid black;">


-- CSS
CSS (Cascading Style Sheets) is a style sheet language used for describing the look and formatting of an HTML (HyperText Markup Language) document. It is used to add style, layout, and visual effects to web pages and user interfaces written in HTML.

CSS allows developers to control the presentation of web pages by separating the presentation style from the content of the document. By creating a separate CSS file, developers can specify how the HTML elements should be displayed, such as the color, font size, spacing, and positioning of the elements.

CSS is a powerful tool for creating visually appealing and user-friendly web pages. With CSS, you can apply styles to individual HTML elements or groups of elements, create layouts and grids, add animations and transitions, and more.

CSS works by targeting specific HTML elements and applying styles to them using selectors. Selectors can target elements by tag name, class name, ID, attributes, and more. CSS also supports the use of cascading rules, which allow multiple styles to be applied to the same element, with the final style determined by a set of prioritization rules.

CSS is an important part of web development, and its use is widespread across the internet. Many websites, web applications, and user interfaces rely heavily on CSS to create a visually pleasing and user-friendly experience for their users.

-- CSS properties 
In CSS, properties are used to control the visual appearance of HTML elements. Each CSS property is a key-value pair, where the key is the property name and the value is the property value.

CSS properties are used to control a wide variety of visual aspects of web pages, such as the color, size, font, spacing, and layout of HTML elements. Some examples of CSS properties include:

color: sets the color of the text
font-size: sets the size of the font
background-color: sets the background color of an element
margin: sets the margin around an element
padding: sets the padding within an element
display: sets the display type of an element
position: sets the positioning of an element
border: sets the border around an element
text-align: sets the horizontal alignment of text within an element

By using CSS properties, developers can create visually appealing and user-friendly web pages, and control the presentation of HTML content in a way that separates it from the content itself.

-- CSS selectors
In CSS, selectors are used to target specific HTML elements in order to apply styles to them. Here are brief explanations of four common types of CSS selectors:

Type Selector: This selector targets all HTML elements of a particular type. For example, the selector p targets all <p> elements. The syntax for a type selector is simply the name of the element.

Class Selector: This selector targets all HTML elements that have a particular class attribute. The class attribute allows developers to group elements together and apply styles to them as a group. The syntax for a class selector is .classname, where classname is the name of the class.

ID Selector: This selector targets a single HTML element that has a particular ID attribute. The ID attribute is used to uniquely identify an element on a web page, and can only be used once per page. The syntax for an ID selector is #idname, where idname is the name of the ID.

Attribute Selector: This selector targets all HTML elements that have a particular attribute. Attributes provide additional information about HTML elements, such as the href attribute on an <a> element. The syntax for an attribute selector is [attribute=value], where attribute is the name of the attribute and value is the value of the attribute that you want to target.

Selectors can also be combined to create more complex targeting of HTML elements, such as targeting only <p> elements with a particular class, or targeting only <a> elements with a particular attribute value.

-- JavaScript 
JavaScript events are actions or occurrences that happen in an HTML document, such as a user clicking a button, a page finishing loading, or an input field changing value. JavaScript can detect these events and respond to them by running a specific function or code block. This allows developers to create interactive web pages that respond to user actions and update dynamically without requiring a page refresh.

Here are some common JavaScript events for HTML files:

onclick: This event occurs when the user clicks an HTML element, such as a button or link. To use this event, you can attach a function to the element's onclick attribute, or use the addEventListener method to register a function to be called when the element is clicked.

onload: This event occurs when the web page finishes loading in the browser. You can use this event to run initialization code, such as setting up event listeners or making API calls.

onsubmit: This event occurs when the user submits a form by clicking a submit button or pressing the Enter key. You can use this event to validate form data or make an AJAX call to submit the form data to a server.

onkeyup and onkeydown: These events occur when the user presses or releases a key on the keyboard while an input field or textarea is in focus. You can use these events to perform actions based on the user's input, such as filtering a list of items based on a search query.

onchange: This event occurs when the value of an input field, select dropdown, or checkbox changes. You can use this event to update the UI or perform other actions based on the user's selection.

There are many more JavaScript events that you can use to create dynamic and interactive web pages. To learn more about events in JavaScript, you can check out the official MDN Web Docs: https://developer.mozilla.org/en-US/docs/Web/Events